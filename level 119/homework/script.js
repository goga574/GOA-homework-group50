// ✅ დავალება 1: შექმენი შენი ცხოველების კოლექცია Map-ით

// 🧠 თემა: Map
// 📌 დავალება:
// შექმენი ცხოველების Map, სადაც key არის ცხოველის სახელი, და value არის მისი ხმა. დაამატე მინიმუმ 3 ახალი ცხოველი. შემდეგ, for-of ლუპით გამოიტანე ყველა ცხოველის ხმა კონსოლში.


let map1 = new Map([["dog", "vafvaf"],["cat","miaumiau"] , ["dzroxa" , "muumuu"]])

map1.set("cxvari" , "beeebeee").set("yvavi" , "yvaa yvaa").set("bati" , "yiyiyi")//ვამატებთ property იებს set ის გამოყენებით


console.log(map1.has("cxvari")) //ვიგებთ არის თუარა მსგავსი key ის მქონე property ობიექტში

console.log("==============Keys============")
for(let j of map1.keys()){
    console.log(j)
}
console.log("==============Values=============")
for(let i of map1.values()){
    console.log(i)
}










// ==================================================================================================



// ✅ დავალება 2: მომხმარებლების უნიკალური სახელები

// 🧠 თემა: Set
// 📌 დავალება:
// შექმენი Set, რომელშიც სახელები იმეორებს (მაგ. "Davit", "Nino", "Davit", "Saba", "Nino"). გამოიყენე Set რომ მხოლოდ უნიკალური სახელები დაიტოვოს და კონსოლში დაპრინტე.

let set1 = new Set(["giorgi" , "giorgi" , "lasha" , "lasha" , 25 , 90 , 90, 3, "irma" , "0" , "0"])

console.log(set1)

for(let i of set1){
    console.log(i)
}







// ==================================================================================================
// ✅ დავალება 3: ასინქრონული მუშაობის მიმდევრობა

// 🧠 თემა: setTimeout
// 📌 დავალება:
// დაწერე 3 ცალკე setTimeout, რომლებიც აჩვენებენ:

//     "Start"

//     "Middle" (1 წამის შემდეგ)

//     "End" (2 წამში)

// ამით ნახავ როგორ მუშაობს ასინქრონული კოდები.

setTimeout(() =>{
    console.log("start")
     
    setTimeout(() =>{

        console.log("middle")

        setTimeout(()=>{
            console.log("end")
        },1000)

    },1000)
},1000)




// ==================================================================================================
// ✅ დავალება 4: map-ის გასუფთავება და შემოწმება

// 🧠 თემა: Map
// 📌 დავალება:
// შექმენი ახალი Map, დაამატე მინიმუმ 2 key-value წყვილი, შემდეგ წაშალე ერთი მათგანი delete მეთოდით, და ბოლოს გამოიყენე .has() რომ შეამოწმო თუ ის წაშლილი key არსებობს თუ არა.

let map = new Map([["name" , "goga"],["surname" , "chalauri"],["age" , 20]])

map.set("height", 1.80).set("adress", "georgia")

map.delete("name")
map.delete("surname")
console.log(map.has("name"))
console.log(map.has("surname"))



console.log("==============Keys============")
for(let j of map.keys()){
    console.log(j)
}
console.log("==============Values=============")
for(let i of map.values()){
    console.log(i)
}







// ==================================================================================================
// ✅ დავალება 5: Set-ით რეალური მაგალითი

// 🧠 თემა: Set
// 📌 დავალება:
// წარმოიდგინე რომ ხარ კონცერტზე და ბილეთზე შემოწმება გიწევს. სახელების სია (array) მოგეცა, სადაც ზოგიერთი ადამიანი ორჯერ წერია. გამოიყენე Set რომ ერთი და იმავე ადამიანს ერთხელ ჩაუტარო შემოწმება.|

let set = new Set(["giorgi" , "giorgi" , "lasha" , "lasha" , "irakli","salome" , "beqa" , "beqa"])

console.log(`შემოწმებას გაივლიან მხოლოდ შემდეგი ადამიანები,ორი ერთნაირი სახელის მქონე ადამიანი არ დაიშვება `)
console.log(set)
